
/*  Typography  */
$fontSans  : 'Work Sans', sans-serif;
$fontSerif : 'Cormorant Garamond', serif;
$fontMono  : 'Space Mono', monospace;

/*  Paragraph-specific variables  */
$paraLineHeight      : 1.6em;
$paraSerifFontSize   : 1.3em;
$paraSerifLineHeight : 1.8em;

$baseFontSize : 1em;
$scaleFactor  : 1.2;

/*  Margin  */
$marginFixed: 12px;
$marginUnit: 2vmax;

/*  Padding  */
$paddingFixed: 12px;
$paddingUnit  : 2vmax;

/*  Colours — Currently using a complementary scheme */
$colorHue     : hsl(  35,  98%,  73%); // Yellowish Orange — this is the main colour
$colorAccent  : hsl( 256,  99%,  65%); // Purple — Complementary-ish colour
$colorMild    : lighten($colorHue, 20%);
$colorShade   :  darken($colorHue, 10%);
$colorDark    :  darken($colorHue, 57%);

$colorRed        : hsl(   1, 100%,  67% );
$colorGreen      : hsl( 147,  65%,  45% );
$colorBlue       : hsl( 187,  69%,  55% );
$colorYellow     : hsl(  40,  99%,  63% );
$colorTeal       : hsl( 161,  60%,  62% );
$colorPurple     : hsl( 275,  51%,  55% );
$colorOrange     : hsl(  34, 100%,  50% );
$colorBrown      : hsl(  22,  49%,  43% );
$colorMildGrey   : hsl(  35,   0%,  95% );
$colorDarkGrey   : hsl(  35,   0%,  60% );
$colorBlack      :  darken($colorHue, 100%);
$colorWhite      : lighten($colorHue, 100%);

// code area styles
$codeBgColor : $colorMildGrey;
$codeColor   : $colorAccent;

/*  Selection highlight  */
$textHighlightBg    : $colorHue;
$textHighlightColor : $colorMild;


/*  Variables for the page body  */
$bodyBgColor     : lighten ($colorHue, 30%);
$bodyFontColor   : $colorDark;
$linkColor       : $colorShade;
$linkBorder      : 1px dotted $colorShade;
$linkHoverBorder : 1px  solid $colorShade;


// Checkbox and radio button background color
$checkboxBgColor : $colorHue;
$radioBgColor    : $colorHue;

// Power function — for scaleFactor usage
@function pow($number, $exponent) {
    $value: 1;

    @if $exponent > 0 {
        @for $i from 1 through $exponent {
            $value: $value * $number;
        }
        } @else if $exponent < 0 {
            @for $i from 1 through -$exponent {
            $value: $value / $number;
        }
    }

  @return $value;
}